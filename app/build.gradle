apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    aaptOptions {
        noCompress "webp"
    }
    compileSdkVersion 30
    buildToolsVersion "30.0.0"

    defaultConfig {
        applicationId "br.com.stickersbrasil"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 7
        versionName "0.0.7"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        def contentProviderAuthority = applicationId + ".stickercontentprovider"
        // Creates a placeholder property to use in the manifest.
        manifestPlaceholders =
                [contentProviderAuthority: contentProviderAuthority]
        // Adds a new field for the authority to the BuildConfig class.
        buildConfigField("String",
                "CONTENT_PROVIDER_AUTHORITY",
                "\"${contentProviderAuthority}\"")
    }

    signingConfigs {

        release {
            storeFile file('keys/keystore_release.jks')
            keyAlias 'stickersmeme'
            keyPassword '1309donatos11'
            storePassword '1309donatos11'
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    packagingOptions {
        exclude 'lib/*/libnative-imagetranscoder.so'
        exclude 'lib/*/libnative-filters.so'
    }
    buildToolsVersion = '29.0.3'

    sourceSets {
        main {
            java.srcDirs += 'src/main/java'
            // List and include all res-* folders
            file('src/main/').listFiles().each {
                if (it.isDirectory() && it.name.contains('res')) {
                    res.srcDirs += it.path
                }
            }
        }
    }

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    //Google Components
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "com.google.android.material:material:$googleComponent"
    implementation "androidx.appcompat:appcompat:$googleComponent"
    implementation "androidx.constraintlayout:constraintlayout:$googleComponent"
    implementation "androidx.recyclerview:recyclerview:$googleComponent"
    implementation "androidx.core:core-ktx:$core"
    implementation "com.android.support:multidex:$multidex"

    //Fresco
    implementation "com.facebook.fresco:fresco:$fresco_version"
    implementation "com.facebook.fresco:webpsupport:$fresco_version"
    implementation "com.facebook.fresco:animated-webp:$fresco_version"
    implementation "com.facebook.fresco:animated-base:$fresco_version"

    // Firebase
    implementation "com.google.firebase:firebase-analytics:$analytics"
    implementation "com.google.firebase:firebase-crashlytics:$crashlytics"
    implementation "com.google.firebase:firebase-ads:$ads"

    // Debug
    api "com.jakewharton.timber:timber:$timber"

    //Test
    testImplementation "junit:junit:$junit"
    androidTestImplementation "androidx.test.ext:junit:$jUnit"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso"

}
repositories {
    mavenCentral()
}